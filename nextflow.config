// Workflow details
manifest {
    
  author = ' Tracy Chew, Cali Willet, Nandan Deshpande, Sydney Informatics Hub, University of Sydney'
  name = 'SomaticShortV-nf'
  description = 'GATK somatic short variant calling pipeline'
  homePage = 'https://github.com/Sydney-Informatics-Hub/Somatic-shortV-nf'
    }

// Mandate a minimum version of nextflow required to run the pipeline
nextflowVersion     = '!>=20.07.1'

// Set default parameters
params {
  version                       = '1.0'
  help                          = false
  input                         = null
  ref                           = false
  intervals                     = false
  
  // (1) No outDir provided in PBS script
  // (a) FULL Path - WORKS
  //outDir = '/scratch/er01/ndes8648/pipeline_work/nextflow/INFRA-83-Somatic-ShortV/Somatic-shortV-nf/results'
  
  // (b) Relative PATH - ERROR  
  // ls:  ./results/Patient1*.stats : No such file or directory in MergeMutectStats
  //outDir = './results'

  // (c) Relative PATH - ERROR
  // ls: results/Patient1*.stats: No such file or directory in MergeMutectStats
  //  outDir = 'results' 

  // Relative path here and in PBS script outDir=results and --outDir ${outDir} provided in nextflow command
  outDir		        	= './results'


  // Intervals for 'Scatter-Gather'
  intervalList          = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n']
  intervalList_path = false

  // PATH to PoN (created previously)
  //params.path_to_PON          = 'PoN_folder'
  //params.ponvcf               = params.path_to_PON+'/'+'pon.vcf.gz'

  
  gadi_account       	= false
  setonix_account     	= false
  whoami            	= false
}

params.common_biallelic_path = params.ref+'/gatk-best-practices/somatic-hg38/'+'small_exac_common_3.hg38.vcf.gz'


// Preset use of containers with Singularity
singularity {
    enabled		    = false
    autoMounts		= true
    }

// Job profiles
profiles {
  local		{ includeConfig "config/local.config" }
  nimbus	{ includeConfig "config/nimbus.config" }
  gadi		{ includeConfig "config/gadi.config" }
  setonix	{ includeConfig "config/setonix.config" }
}

// Fail a task if any command returns non-zero exit code
shell = ['/bin/bash', '-euo', 'pipefail']

// Resources for each process
// default run resource parameters
process {

withName: 'mutect2' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    }

    withName: 'GatherVcfs_step' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    }
 

    withName: 'MergeMutectStats' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    } 

    withName: 'LearnReadOrientationModel' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    } 

  withName: 'GetPileupSummaries' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    } 

  withName: 'CalculateContamination' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'

    } 

  withName: 'FilterMutectCalls' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
    } 

withName: 'getFilteredVariants' {
        cpus = 1
        memory = '20.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
        
} 

withName: 'annotate_with_snpEff' {
        cpus = 1
        memory = '40.GB'
        container = 'quay.io/biocontainers/gatk4:4.1.4.1--0'
        
} 
}

// Define timestamp, to avoid overwriting existing trace
def timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

// Produce a workflow diagram
dag {
  enabled = true
  file = "${params.outDir}/runInfo/SomaticShortV_dag_${timestamp}.svg"
}

report {
  enabled = true
  file = "${params.outDir}/runInfo/SomaticShortV_report_${timestamp}.html"
}

timeline {
  enabled = true
	overwrite = true
	file = "${params.outDir}/runInfo/SomaticShortV_timeline_${timestamp}.html"
}

trace {
	enabled = true
	overwrite = true
  file = "${params.outDir}/runInfo/SomaticShortV_trace_${timestamp}.txt"
  fields = 'process,name,status,queue,realtime,cpus,%cpu,memory,%mem,rss,env'
}
